{
  "name": "Moderngl",
  "tagline": "modern OpenGL for Python",
  "body": "# ModernGL\r\n\r\n[![Join the chat at https://gitter.im/cprogrammer1994/ModernGL](https://badges.gitter.im/cprogrammer1994/ModernGL.svg)](https://gitter.im/cprogrammer1994/ModernGL?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n[![PyPI](https://img.shields.io/pypi/l/ModernGL.svg)](https://pypi.python.org/pypi/ModernGL)\r\n[![PyPI](https://img.shields.io/pypi/pyversions/ModernGL.svg)](https://pypi.python.org/pypi/ModernGL)\r\n[![PyPI](https://img.shields.io/pypi/v/ModernGL.svg)](https://pypi.python.org/pypi/ModernGL)\r\n[![github](https://img.shields.io/github/tag/cprogrammer1994/ModernGL.svg)](https://github.com/cprogrammer1994/ModernGL)\r\n\r\n[![PyPI](https://img.shields.io/pypi/status/ModernGL.svg)](https://pypi.python.org/pypi/ModernGL)\r\n[![PyPI](https://img.shields.io/pypi/dm/ModernGL.svg)](https://pypi.python.org/pypi/ModernGL)\r\n\r\n```\r\npython -m pip install ModernGL\r\n```\r\n\r\n```\r\ngit clone https://github.com/cprogrammer1994/ModernGL\r\ninstall.bat\r\n```\r\n\r\n# Supported Versions\r\n\r\n![OpenGL-3.3](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-33.png)\r\n![OpenGL-4.0](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-40.png)\r\n![OpenGL-4.1](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-41.png)\r\n![OpenGL-4.2](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-42.png)\r\n![OpenGL-4.3](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-43.png)\r\n![OpenGL-4.4](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-44.png)\r\n![OpenGL-4.5](https://raw.githubusercontent.com/cprogrammer1994/libOpenGL.a/master/Badges/OpenGL-45.png)\r\n\r\nCheckout the [OpenGL Registry](https://www.opengl.org/registry/) for core specifications.\r\n\r\n# Description\r\n\r\nOpenGL is a great environment for developing portable, platform independent,\r\ninteractive 2D and 3D graphics applications. The API implementation in Python\r\nis cumbersome, resulting in applications with high latency. To solve this\r\nproblem we have developed ModernGL, a wrapper over OpenGL that simplifies the\r\ncreation of simple graphics applications like scientific simulations, small\r\ngames or user interfaces. Usually, acquiring in-depth knowledge of OpenGL\r\nrequires a steep learning curve. In contrast, ModernGL is easy to learn and\r\nuse, moreover it is capable of rendering with the same performance and\r\nquality, with less code written.\r\n\r\n# Docs\r\n\r\n[Python Documentation](https://pythonhosted.org/ModernGL/)\r\n\r\n```\r\nInitializeModernGL(font = True)\r\nGetError()\r\nGetInfo()\r\n\r\nViewport(x, y, w, h)\r\nClear(r = 0, g = 0, b = 0, a = 255)\r\n\r\nPointSize(size)\r\nLineSize(size)\r\n\r\nEnableOnly(mask)\r\n  # Parameters:\r\n    ENABLE_NOTHING\r\n    ENABLE_BLEND\r\n    ENABLE_CULL_FACE\r\n    ENABLE_DEPTH_TEST\r\n    ENABLE_MULTISAMPLE\r\n  \r\n  # Example:\r\n    EnableOnly(ENABLE_CULL_FACE | ENABLE_DEPTH_TEST)\r\n\r\nEnableBlend()\r\nDisableBlend()\r\nEnableCullFace()\r\nDisableCullFace()\r\nEnableDepthTest()\r\nDisableDepthTest()\r\nEnableMultisample()\r\nDisableMultisample()\r\n\r\nNewProgram(shaders)\r\n  # Example:\r\n    NewProgram([NewVertexShader(...), NewFragmentShader(...)])\r\n\r\nDeleteProgram(program)\r\n  # This will delete all the shaders linked to this program\r\n\r\nUseProgram(program)\r\nUseDefaultProgram()\r\n\r\nNewFragmentShader(source)\r\nNewGeometryShader(source)\r\nNewVertexShader(source)\r\nDeleteShader(shader)\r\n\r\nCompilerLog()\r\n\r\nAttributeLocation(program, name)\r\nUniformLocation(program, name)\r\nUniformBlockLocation(program, name)\r\n\r\nUniform1f(location, v0)\r\nUniform2f(location, v0, v1)\r\nUniform3f(location, v0, v1, v2)\r\nUniform4f(location, v0, v1, v2, v3)\r\nUniform1i(location, v0)\r\nUniform2i(location, v0, v1)\r\nUniform3i(location, v0, v1, v2)\r\nUniform4i(location, v0, v1, v2, v3)\r\n\r\nUniformMatrix(location, matrix)\r\n  # Example:\r\n    UniformMatrix([1, 2, 3 ... 15, 16])\r\n\r\nUniformTransposeMatrix(location, matrix)\r\nUniformBlock(location, buffer)\r\n\r\nNewTexture(width, height, data, components = 3)\r\nDeleteTexture(texture)\r\nUpdateTexture(texture, x, y, width, height, data, components = 3)\r\nUseTexture(texture, location = 0)\r\n\r\nSetTexturePixelated(texture)\r\nSetTextureFiltered(texture)\r\nSetTextureMipmapped(texture)\r\n\r\nBuildMipmap(texture, base = 0, max = 1000)\r\n\r\nNewVertexArray(format, attribs, indexBuffer = 0)\r\nDeleteVertexArray(array)\r\nEnableAttribute(vao, target)\r\nDisableAttribute(vao, target)\r\nEnableAttributes(vao, targets)\r\nDisableAttributes(vao, targets)\r\n\r\nNewVertexBuffer(data)\r\nNewIndexBuffer(data)\r\nNewUniformBuffer(data)\r\nNewDynamicVertexBuffer(data)\r\nNewDynamicIndexBuffer(data)\r\nNewDynamicUniformBuffer(data)\r\nDeleteBuffer(buffer)\r\n\r\nUpdateVertexBuffer(buffer, offset, data)\r\nUpdateIndexBuffer(buffer, offset, data)\r\nUpdateUniformBuffer(buffer, offset, data)\r\n\r\nRenderTriangles(vao, count, first = 0, instances = 1)\r\nRenderTriangleStrip(vao, count, first = 0, instances = 1)\r\nRenderTriangleFan(vao, count, first = 0, instances = 1)\r\nRenderLines(vao, count, first = 0, instances = 1)\r\nRenderLineStrip(vao, count, first = 0, instances = 1)\r\nRenderLineLoop(vao, count, first = 0, instances = 1)\r\nRenderPoints(vao, count, first = 0, instances = 1)\r\nRenderLineStripAdjacency(vao, count, first = 0, instances = 1)\r\nRenderLinesAdjacency(vao, count, first = 0, instances = 1)\r\nRenderTriangleStripAdjacency(vao, count, first = 0, instances = 1)\r\nRenderTrianglesAdjacency(vao, count, first = 0, instances = 1)\r\n\r\nRenderIndexedTriangles(vao, count, first = 0, instances = 1)\r\nRenderIndexedTriangleStrip(vao, count, first = 0, instances = 1)\r\nRenderIndexedTriangleFan(vao, count, first = 0, instances = 1)\r\nRenderIndexedLines(vao, count, first = 0, instances = 1)\r\nRenderIndexedLineStrip(vao, count, first = 0, instances = 1)\r\nRenderIndexedLineLoop(vao, count, first = 0, instances = 1)\r\nRenderIndexedPoints(vao, count, first = 0, instances = 1)\r\nRenderIndexedLineStripAdjacency(vao, count, first = 0, instances = 1)\r\nRenderIndexedLinesAdjacency(vao, count, first = 0, instances = 1)\r\nRenderIndexedTriangleStripAdjacency(vao, count, first = 0, instances = 1)\r\nRenderIndexedTrianglesAdjacency(vao, count, first = 0, instances = 1)\r\n\r\nNewFramebuffer(width, height, multisample = True)\r\nDeleteFramebuffer(framebuffer)\r\nUseFramebuffer(framebuffer)\r\nUseDefaultFramebuffer()\r\n\r\nReadPixels(x, y, width, height, components = 3)\r\nReadDepthPixels(x, y, width, height)\r\nReadPixel(x, y)\r\nReadDepthPixel(x, y)\r\n```\r\n\r\n```\r\nExtensionActive()\r\n\r\nUseTextureAsImage(texture, binding = 0, components = 3)\r\n\r\nNewTessControlShader(source)\r\nNewTessEvaluationShader(source)\r\n\r\nNewComputeShader(source)\r\nDeleteComputeShader(program)\r\nRunComputeShader(program, x = 1, y = 1, z = 1)\r\n\r\nNewStorageBuffer(data)\r\nNewDynamicStorageBuffer(data)\r\nUpdateStorageBuffer(buffer, offset, data)\r\nUseStorageBuffer(buffer, binding = 0)\r\nReadStorageBuffer(buffer, offset, size)\r\n```\r\n\r\n# Concept\r\n\r\nSOON\r\n> ModernGL simply implements a set of OpenGL functions\r\n\r\n# Example\r\n\r\nSOON\r\n> [Julia Fractal](https://gist.github.com/cprogrammer1994/ecd69bc181e159305ad6)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}